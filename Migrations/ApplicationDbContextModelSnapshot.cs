// <auto-generated />
using System;
using APIAssessment.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APIAssessment.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("APIAssessment.Models.PlayerAccount", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AccountId");

                    b.ToTable("PlayerAccounts");

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("daf35aad-7654-4085-868f-27347ef2e522"),
                            Username = "Max.Booth67"
                        },
                        new
                        {
                            AccountId = new Guid("70f8f4dd-f621-40b8-9692-eac3f7e4a667"),
                            Username = "Sentle.Morake88"
                        },
                        new
                        {
                            AccountId = new Guid("72e2cae1-4ec0-4f00-8c7a-29caba70f4b4"),
                            Username = "Bova.Senoinoi11"
                        });
                });

            modelBuilder.Entity("APIAssessment.Models.PlayerCasinoWager", b =>
                {
                    b.Property<Guid>("WagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ExternalReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GameName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfBets")
                        .HasColumnType("int");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SessionData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TransactionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WagerId");

                    b.HasIndex("AccountId");

                    b.ToTable("PlayerCasinoWagers");

                    b.HasData(
                        new
                        {
                            WagerId = new Guid("e4993f13-3bde-4f82-a85c-4618e5cdc037"),
                            AccountId = new Guid("daf35aad-7654-4085-868f-27347ef2e522"),
                            Amount = 38273.97m,
                            BrandId = new Guid("b93d8830-70be-48e8-82d9-3e66bba13f96"),
                            CountryCode = "ZAR",
                            CreatedDateTime = new DateTime(2024, 9, 27, 13, 14, 56, 692, DateTimeKind.Utc).AddTicks(7044),
                            Duration = 1827254L,
                            ExternalReferenceId = new Guid("00000000-0000-0000-0000-000000000000"),
                            GameName = "Ergonomic Granite Cheese",
                            NumberOfBets = 3,
                            Provider = "Ergonomic Soft Fish",
                            SessionData = "Sample session data",
                            Status = 0,
                            Theme = "Adventure",
                            TransactionId = new Guid("d09b25ba-2f8a-478d-b2a6-86ff7c651ebc"),
                            TransactionTypeId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            WagerId = new Guid("57751b73-0a4f-4738-9c56-99acb8ed2373"),
                            AccountId = new Guid("70f8f4dd-f621-40b8-9692-eac3f7e4a667"),
                            Amount = 52450.12m,
                            BrandId = new Guid("d243d980-44ec-4715-a793-30c0c9eb39a0"),
                            CountryCode = "ZAR",
                            CreatedDateTime = new DateTime(2024, 9, 27, 13, 14, 56, 692, DateTimeKind.Utc).AddTicks(7072),
                            Duration = 2657842L,
                            ExternalReferenceId = new Guid("00000000-0000-0000-0000-000000000000"),
                            GameName = "Mystery of the Lost Tomb",
                            NumberOfBets = 5,
                            Provider = "Ultimate Games Ltd",
                            SessionData = "Sample session data for mystery game",
                            Status = 0,
                            Theme = "Mystery",
                            TransactionId = new Guid("624afb15-90ab-433a-a5b0-f05d1a653102"),
                            TransactionTypeId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            WagerId = new Guid("a16f1fb9-98bd-47fe-bd63-2f16fb088acc"),
                            AccountId = new Guid("72e2cae1-4ec0-4f00-8c7a-29caba70f4b4"),
                            Amount = 19834.75m,
                            BrandId = new Guid("5cc2e173-1de5-4a86-aacc-9b5403c8c079"),
                            CountryCode = "ZAR",
                            CreatedDateTime = new DateTime(2024, 9, 27, 13, 14, 56, 692, DateTimeKind.Utc).AddTicks(7077),
                            Duration = 1458721L,
                            ExternalReferenceId = new Guid("00000000-0000-0000-0000-000000000000"),
                            GameName = "Starscape Galaxy Quest",
                            NumberOfBets = 2,
                            Provider = "Next Gen Gaming",
                            SessionData = "Sample session data for space game",
                            Status = 0,
                            Theme = "Space",
                            TransactionId = new Guid("533efc4c-bffc-464e-a412-34b1948b6b58"),
                            TransactionTypeId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("APIAssessment.Models.PlayerCasinoWager", b =>
                {
                    b.HasOne("APIAssessment.Models.PlayerAccount", "PlayerAccount")
                        .WithMany("PlayerCasinoWagers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerAccount");
                });

            modelBuilder.Entity("APIAssessment.Models.PlayerAccount", b =>
                {
                    b.Navigation("PlayerCasinoWagers");
                });
#pragma warning restore 612, 618
        }
    }
}
